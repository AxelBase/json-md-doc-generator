import{S as i,i as n,s as l,n as s,d as p,b as c,m as d,o as m,e as h,p as g,j as u}from"../chunks/Bmy3Ah6d.js";import"../chunks/IHki7fMi.js";import{b as y}from"../chunks/dqv6y2aA.js";const f=!0,T=Object.freeze(Object.defineProperty({__proto__:null,prerender:f},Symbol.toStringTag,{value:"Module"}));function b(r){let e,a=`<article><h1 class="mb-4">Common JSON Validation Errors (and Fixes)</h1> <p>When using the json-md-doc-generator tool, you might encounter validation errors if your JSON input is malformed. These errors are designed to help you troubleshoot quickly (per FR5.1). This article lists the most frequent issues—missing commas, unquoted keys, trailing commas, and mismatched brackets—along with examples of invalid JSON, the error messages you’ll see, and the corrected versions to get you back on track.</p> <h2>Missing Commas</h2> <p>When JSON contains an array of simple values (e.g., strings, numbers), the tool converts it into a Markdown bullet list. This is ideal for task lists or itemized data. Example:</p> <pre><script type="text/plain">{ "name": "Alice" "age": 30 }<\/script></pre> <p>Converts to:</p> <pre>## name
Alice
## age
30</pre> <p>This format is perfect for quick readability and can be extended with nested lists if needed.</p> <h2>Unquoted Keys</h2> <p>For arrays of objects, the tool generates Markdown tables, with keys becoming column headers. This is great for structured data like team rosters or project milestones. Example:</p> <pre><script type="text/plain">{ name: "Alice", age: 30 }<\/script></pre> <p>Converts to:</p> <pre>## name
Alice
## age
30</pre> <p>Tables are automatically aligned and can handle multiple fields, making complex data digestible.</p> <h2>Trailing Commas</h2> <p>Nested JSON objects are transformed into a hierarchy of Markdown headings, allowing for deep navigation. Example:</p> <pre><script type="text/plain">{ "name": "Alice", "age": 30, }<\/script></pre> <p>Converts to:</p> <pre>## name
Alice
## age
30</pre> <p>This structure mirrors the JSON nesting, making it easy to drill down into details.</p> <h2>Mismatched Brackets</h2> <p>The tool orders JSON keys consistently, ensuring that the resulting Markdown structure doesn’t vary. For example:</p> <pre><script type="text/plain">{ "items": [ "a", "b" }<\/script></pre> <p>Converts to:</p> <pre>## items
- a
- b</pre> <h2>Troubleshooting Tips</h2> <p>- Use consistent key names for uniform table headers.
        - Keep arrays of objects small for readability; split large datasets if necessary.
        - Leverage nesting to organize complex projects into logical sections.</p> <p>Experiment with the tool using these examples. Upload a \`.json\` file or paste the text to see how arrays and objects transform into polished Markdown, enhancing your documentation efficiency.</p></article> <div style="margin-top: 3rem; border-top: 1px solid var(--border-color); padding-top: 1.5rem;"><a href="${y}/blog">← Back to Blog</a></div>`;return{c(){e=u("div"),e.innerHTML=a,this.h()},l(t){e=h(t,"DIV",{class:!0,style:!0,"data-svelte-h":!0}),g(e)!=="svelte-y8qbis"&&(e.innerHTML=a),this.h()},h(){d(e,"class","container py-4"),m(e,"max-width","800px")},m(t,o){c(t,e,o)},p:s,i:s,o:s,d(t){t&&p(e)}}}class w extends i{constructor(e){super(),n(this,e,null,b,l,{})}}export{w as component,T as universal};
